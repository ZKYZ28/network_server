Index: app/src/main/java/org/helmo/murmurG6/controller/ServerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.helmo.murmurG6.controller;\r\n\r\nimport org.helmo.murmurG6.models.User;\r\nimport org.helmo.murmurG6.models.UserLibrary;\r\nimport org.helmo.murmurG6.models.exceptions.UserAlreadyRegisteredException;\r\nimport org.helmo.murmurG6.repository.UserRepository;\r\nimport org.helmo.murmurG6.repository.exceptions.SaveUserCollectionException;\r\nimport org.helmo.murmurG6.utils.UltraImportantClass;\r\n\r\nimport javax.net.ServerSocketFactory;\r\nimport javax.net.ssl.SSLServerSocket;\r\nimport javax.net.ssl.SSLServerSocketFactory;\r\nimport javax.net.ssl.SSLSocket;\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.net.UnknownHostException;\r\nimport java.util.*;\r\n\r\n/**\r\n * La classe ServerController représente le contrôleur principal de l'application serveur.\r\n * Cette classe gère la connexion des clients et communique avec la classe ClientRunnable pour gérer la communication avec les clients.\r\n */\r\npublic class ServerController implements AutoCloseable {\r\n    private final Set<ClientRunnable> clientList = Collections.synchronizedSet(new HashSet<>());\r\n    private final SSLServerSocket serverSocket;\r\n    private final UserRepository storage;\r\n    private final UserLibrary userLibrary;\r\n\r\n    /**\r\n     * Le constructeur de la classe ServerController permet de créer un nouveau serveur en spécifiant un numéro de port et un storage d'utilisateurs.\r\n     *\r\n     * @param port Le numéro de port sur lequel le serveur écoutera les connexions entrantes.\r\n     * @param repo Le storage d'utilisateurs qui sera utilisé pour enregistrer et lire les informations d'utilisateur.\r\n     * @throws IOException En cas d'échec de la création du socket serveur.\r\n     */\r\n    public ServerController(int port, UserRepository repo) throws IOException {\r\n        SSLServerSocketFactory sslServerSocketFactory = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\r\n        this.serverSocket = (SSLServerSocket) sslServerSocketFactory.createServerSocket(port);\r\n        //this.serverSocket = new ServerSocket(port);\r\n        this.storage = repo;\r\n        this.userLibrary = repo.load(); //remplissage de tous les users inscrits dans la usercollection\r\n\r\n        UltraImportantClass.welcome();\r\n        System.out.println(\"****************************************************************\");\r\n        System.out.println(\"********      SERVER ONLINE ! IP : \" + getIp() + \"        *********\");\r\n        System.out.println(\"****************************************************************\");\r\n    }\r\n\r\n\r\n    public void start() throws IOException {\r\n        TaskScheduler executor = Executor.getInstance();\r\n        executor.setServer(this);\r\n        new Thread(executor).start();\r\n\r\n        while (!this.serverSocket.isClosed()) {\r\n            SSLSocket client = (SSLSocket) serverSocket.accept();\r\n            //Socket client = serverSocket.accept();\r\n            System.out.println(\"Quelqu'un s'est connecté!\");\r\n            ClientRunnable runnable = new ClientRunnable(client);\r\n            clientList.add(runnable);\r\n            new Thread(runnable).start();\r\n        }\r\n    }\r\n\r\n    public void broadcastToAllClientsExceptMe(ClientRunnable me, String message) {\r\n        System.out.printf(\"[broadcastAll] Message envoyé : %s\\n\", message);\r\n        for (ClientRunnable c : clientList) {\r\n            if (c != me) {\r\n                c.sendMessage(\"MSGS admin@192.168.0.19 \" + message);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void saveUsers() throws SaveUserCollectionException {\r\n        storage.save(this.userLibrary);\r\n    }\r\n\r\n    public UserLibrary getUserCollection() {\r\n        return userLibrary;\r\n    }\r\n\r\n    public String getIp() {\r\n        try {\r\n            return InetAddress.getLocalHost().getHostAddress();\r\n        } catch (UnknownHostException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        try {\r\n            this.serverSocket.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/org/helmo/murmurG6/controller/ServerController.java b/app/src/main/java/org/helmo/murmurG6/controller/ServerController.java
--- a/app/src/main/java/org/helmo/murmurG6/controller/ServerController.java	(revision 6a6b2b76e5e2af52ac729c908399805921bb01e1)
+++ b/app/src/main/java/org/helmo/murmurG6/controller/ServerController.java	(date 1676541086721)
@@ -52,11 +52,10 @@
     public void start() throws IOException {
         TaskScheduler executor = Executor.getInstance();
         executor.setServer(this);
-        new Thread(executor).start();
+        new Thread(executor).start(); 
 
         while (!this.serverSocket.isClosed()) {
-            SSLSocket client = (SSLSocket) serverSocket.accept();
-            //Socket client = serverSocket.accept();
+            Socket client = serverSocket.accept();
             System.out.println("Quelqu'un s'est connecté!");
             ClientRunnable runnable = new ClientRunnable(client);
             clientList.add(runnable);
Index: app/src/main/resources/storage/user.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[{\"login\":\"dsfdsfsdf\",\"bcryptDto\":{\"rounds\":14,\"salt\":\"MYp9yzZ3bgOyottk0ZuM3u\",\"hash\":\"mysv9gGUkWLO8nYcjBZtY.WXMQXaDN2\"},\"followedUsers\":[],\"followedTrends\":[]},{\"login\":\"sdfsdfsdf\",\"bcryptDto\":{\"rounds\":14,\"salt\":\"kWb5hmPwsBn4kxzXZoWede\",\"hash\":\"33IBOSpgbrPY6.TIS7/DHkSjAjM2itO\"},\"followedUsers\":[],\"followedTrends\":[]},{\"login\":\"fgfdgdfgdfgdfg\",\"bcryptDto\":{\"rounds\":14,\"salt\":\"BpXPKLiH8U2GHfFsQFjM9u\",\"hash\":\"2ntrbByvxwoLTvJ2HbXzWjBOZ8h/ewS\"},\"followedUsers\":[],\"followedTrends\":[]}]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/resources/storage/user.json b/app/src/main/resources/storage/user.json
--- a/app/src/main/resources/storage/user.json	(revision 6a6b2b76e5e2af52ac729c908399805921bb01e1)
+++ b/app/src/main/resources/storage/user.json	(date 1676503290564)
@@ -1,1 +1,1 @@
-[{"login":"dsfdsfsdf","bcryptDto":{"rounds":14,"salt":"MYp9yzZ3bgOyottk0ZuM3u","hash":"mysv9gGUkWLO8nYcjBZtY.WXMQXaDN2"},"followedUsers":[],"followedTrends":[]},{"login":"sdfsdfsdf","bcryptDto":{"rounds":14,"salt":"kWb5hmPwsBn4kxzXZoWede","hash":"33IBOSpgbrPY6.TIS7/DHkSjAjM2itO"},"followedUsers":[],"followedTrends":[]},{"login":"fgfdgdfgdfgdfg","bcryptDto":{"rounds":14,"salt":"BpXPKLiH8U2GHfFsQFjM9u","hash":"2ntrbByvxwoLTvJ2HbXzWjBOZ8h/ewS"},"followedUsers":[],"followedTrends":[]}]
\ No newline at end of file
+[{"login":"dsfdsfsdf","bcryptDto":{"rounds":14,"salt":"MYp9yzZ3bgOyottk0ZuM3u","hash":"mysv9gGUkWLO8nYcjBZtY.WXMQXaDN2"},"followedUsers":[],"followedTrends":[]},{"login":"sdfsdfsdf","bcryptDto":{"rounds":14,"salt":"kWb5hmPwsBn4kxzXZoWede","hash":"33IBOSpgbrPY6.TIS7/DHkSjAjM2itO"},"followedUsers":[],"followedTrends":[]},{"login":"fgfdgdfgdfgdfg","bcryptDto":{"rounds":14,"salt":"BpXPKLiH8U2GHfFsQFjM9u","hash":"2ntrbByvxwoLTvJ2HbXzWjBOZ8h/ewS"},"followedUsers":[],"followedTrends":[]},{"login":"dfgdfgdfgd","bcryptDto":{"rounds":14,"salt":"EUp.l7tjncv6LezRW4Kike","hash":"O0cau40Uls6qw5oSlm13DvsJVlx86ra"},"followedUsers":[],"followedTrends":[]},{"login":"sfsdfsdgdfsd","bcryptDto":{"rounds":14,"salt":"QKyDcMYhMtr86FERepcCx.","hash":"pCX0sqE0f5np76aaSHohuPu6l0Fvyse"},"followedUsers":[],"followedTrends":[]}]
\ No newline at end of file
